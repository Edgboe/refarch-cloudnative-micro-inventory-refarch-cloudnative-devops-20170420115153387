---
stages:
- name: Build
  inputs:
  - url: https://github.com/fabiogomezdiaz/refarch-cloudnative-micro-inventory-fabio.git
    type: git
    branch: integration
    dir_name: null
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: fabio-case
    COMMAND: "#!/bin/bash\n# The following colors have been defined to help with presentation\
      \ of logs: green, red, label_color, no_color.  \nlog_and_echo \"$LABEL\" \"\
      Starting build script\"\n\nexport JAVA_HOME=~/java8\n\ncd inventory; ./gradlew\
      \ build docker\ncd ..\npwd\n\ncp -r inventory/docker/* .\n\n# The IBM Container\
      \ BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv)\
      \ have been installed.\n# Based on the organization and space selected in the\
      \ Job credentials are in place for both IBM Container Service and IBM Bluemix\
      \ \n#####################\n# Run unit tests    #\n#####################\nlog_and_echo\
      \ \"$LABEL\" \"No unit tests cases have been checked in\"\n\nSPACE=$($IC_COMMAND\
      \ info|grep 'Bluemix Space'|awk '{print $NF}'|sed \"s/\\(.*\\)\\((.*\\)/\\1/\"\
      )\nIMAGE_NAME=$(echo $IMAGE_NAME|sed \"s/-$SPACE//\")\nREGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}\n\n######################################\n\
      # Build Container via Dockerfile     #\n######################################\n\
      \n# REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n# FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}\n\
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property\
      \ on the stage.\n\nif [ -f Dockerfile ]; then \n    log_and_echo \"$LABEL\"\
      \ \"Building ${FULL_REPOSITORY_NAME}\"\n    ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l info -m \"New container build requested for ${FULL_REPOSITORY_NAME}\"\n\
      \    # build image\n    BUILD_COMMAND=\"\"\n    if [ \"${USE_CACHED_LAYERS}\"\
      \ == \"true\" ]; then \n        BUILD_COMMAND=\"build --pull --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n  \
      \  else \n        BUILD_COMMAND=\"build --no-cache --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n  \
      \  fi \n\n    if [ $RESULT -ne 0 ]; then\n        log_and_echo \"$ERROR\" \"\
      Error building image\"\n        ice_retry info \n        ice_retry images\n\
      \        ${EXT_DIR}/print_help.sh\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l bad -m \"Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)\"\
      \n        exit 1\n    else\n        log_and_echo \"$SUCCESSFUL\" \"Container\
      \ build of ${FULL_REPOSITORY_NAME} was successful\"\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l good -m \"Container build of ${FULL_REPOSITORY_NAME} was successful\"\n\
      \    fi  \nelse \n    log_and_echo \"$ERROR\" \"Dockerfile not found in project\"\
      \n    ${EXT_DIR}/utilities/sendMessage.sh -l bad -m \"Failed to get Dockerfile.\
      \ $(get_error_info)\"\n    exit 1\nfi  \n\n######################################################################################\n\
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE\
      \    #\n######################################################################################\n\
      echo \"IMAGE_NAME=${FULL_REPOSITORY_NAME}\" >> $ARCHIVE_DIR/build.properties"
    IMAGE_NAME: us-micro-inventory-cloudnative-integration
    USE_CACHED_LAYERS: 'true'
- name: Deploy
  inputs:
  - type: job
    stage: Build
    job: Build
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: MYSQL_PASSWORD
    value: ${MYSQL_PASSWORD}
    type: text
  jobs:
  - name: Deploy
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: fabio-case
    COMMAND: "#!/bin/bash\n# The following are some example deployment scripts.  Use\
      \ these as is or fork them and include your updates here:\necho -e \"${label_color}Starting\
      \ deployment script${no_color}\"\nset +e\n# download jq\nJQ_BIN=`which jq`\n\
      if [ -z \"${JQ_BIN}\" ]; then\n  if [ ! -f \"./jq\" ]; then\n      wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64\n\
      \      mv jq-linux64 jq\n      chmod u+x jq\n      JQ_BIN=\"./jq\"\n  fi\nfi\n\
      set -x\n# messagehub credentials\nmessagehub_svc=`cf services | grep messagehub\
      \ | sed -e 's/[ ][ ]messagehub.*$//' | sed -e 's/[ ]*$//g'`\nmessagehub_cred_name=`cf\
      \ service-keys \"${messagehub_svc}\" | tail -1 | sed -e 's/[ ]*$//g'`\nmessagehub_creds=`cf\
      \ service-key \"${messagehub_svc}\" \"${messagehub_cred_name}\" | grep -v \"\
      Getting key \"`\nkafka_username=`echo ${messagehub_creds} | ./jq '.user' | sed\
      \ -e 's/\"//g'`\nkafka_password=`echo ${messagehub_creds} | ./jq '.password'\
      \ | sed -e 's/\"//g'`\nkafka_brokerlist=`echo ${messagehub_creds} | ./jq '.kafka_brokers_sasl\
      \ | join(\" \")' | sed -e 's/\"//g'`\nkafka_apikey=`echo ${messagehub_creds}\
      \ | ./jq '.api_key' | sed -e 's/\"//g'`\nkafka_adminurl=`echo ${messagehub_creds}\
      \ | ./jq '.kafka_admin_url' | sed -e 's/\"//g'`\n# To view/fork this script\
      \ goto: https://github.com/Osthanes/deployscripts\n# git_retry will retry git\
      \ calls to prevent pipeline failure on temporary github problems\n# the code\
      \ can be found in git_util.sh at https://github.com/Osthanes/container_deployer\n\
      git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts\n\
      # You can deploy your Image as either a single Container or as a Container \n\
      # Group.  A Container Group deploys a number of containers to enhance\n# scalability\
      \ or reliability.  By default we will deploy as a single \n# container.  To\
      \ switch to a group deploy, comment out the line below\n# containing deploycontainer.sh\
      \ and uncomment the line for deploygroup.sh\n# Deploy with containers:\n# Optional\
      \ environment properties (can be set directly in this script, or defined as\
      \ environment properties):\n#      NAME              Value         Description\n\
      #   =============      =========     ==============\n#   BIND_TO           \
      \  String       Specify a Bluemix application name that whose bound services\
      \ you wish to make available to the container.  By default this is not set.\n\
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano\
      \ (128), micro (256), tiny (512), small (1024), medium (2048),\n#          \
      \                                                  large (4096), x-large (8192),\
      \ 2x-large (16384).\n#                                    Default is micro (256).\n\
      #   CONCURRENT_VERSIONS Number       Number of versions of this container to\
      \ leave active.  \n#                                    Default is 1\n#\n#/bin/bash\
      \ deployscripts/deploycontainer.sh\nOPTIONAL_ARGS=\"${OPTIONAL_ARGS} \\\n  \
      \    --hostname micro-inventory \\\n      -e eureka.client.fetchRegistry=true\
      \ \\\n      -e eureka.client.registerWithEureka=false \\\n      -e \"eureka.client.serviceUrl.defaultZone=${EUREKA_REGISTRY_URL}\"\
      \ \\\n      -e \"spring.datasource.url=${JDBC_URL}\" \\\n      -e \"spring.datasource.username=${MYSQL_USERNAME}\"\
      \ \\\n      -e \"spring.datasource.password=${MYSQL_PASSWORD}\" \\\n      -e\
      \ \"elasticsearch.user=${ELASTICSEARCH_USER}\" \\\n      -e \"elasticsearch.password=${ELASTICSEARCH_PASSWORD}\"\
      \ \\\n      -e \"elasticsearch.url=${ELASTICSEARCH_URL}\" \\\n      -e \"message_hub.topic=orders\"\
      \ \\\n      -e \"message_hub.user=${kafka_username}\" \\\n      -e \"message_hub.password=${kafka_password}\"\
      \ \\\n      -e \"message_hub.kafka_rest_url=${kafka_adminurl}\" \\\n      -e\
      \ \"message_hub.api_key=${kafka_apikey}\"\"\n# add the kafka broker list\ncount=0\n\
      for broker in ${kafka_brokerlist}; do\n    OPTIONAL_ARGS=\"${OPTIONAL_ARGS}\
      \ -e \"message_hub.kafka_brokers_sasl[${count}]=${broker}\"\"\n    count=$((count+1))\n\
      done\n# Deploy Container Group:\n# Optional environment properties (can be set\
      \ directly in this script, or defined as environment properties):\n#      NAME\
      \              Value         Description\n#   =============      ========= \
      \    ==============\n#   ROUTE_HOSTNAME      String       Specify the Hostname\
      \ for the Cloud Foundry Route you wish to assign to this container group.  By\
      \ default this is not set.\n#   ROUTE_DOMAIN        String       Specify domain\
      \ name for the Cloud Foundry Route you wish to assign to this container group.\
      \  By default this is not set.\n#   BIND_TO             String       Specify\
      \ a Bluemix application name that whose bound services you wish to make available\
      \ to the container.  By default this is not set.\n#   DESIRED_INSTANCES:  Number\
      \       Specify the number of instances in the group.  Default value is 1.\n\
      #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default\
      \ value is false.\n#                                    Default is false.\n\
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano\
      \ (128), micro (256), tiny (512), small (1024), medium (2048),\n#          \
      \                                                  large (4096), x-large (8192),\
      \ 2x-large (16384).\n#                                    Default is micro (256).\n\
      #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave\
      \ active.\n#                                    Default is 1\n# IF YOU WANT\
      \ CONTAINER GROUPS .. uncomment the next line, and comment out the previous\
      \ deployment line (/bin/bash deployscripts/deploygroup.sh)\n/bin/bash deployscripts/deploygroup.sh\n\
      RESULT=$?\n# source the deploy property file\nif [ -f \"${DEPLOY_PROPERTY_FILE}\"\
      \ ]; then\n  source \"$DEPLOY_PROPERTY_FILE\"\nfi\n#########################\n\
      # Environment DETAILS   #\n#########################\n# The environment has\
      \ been setup.\n# The Cloud Foundry CLI (cf), IBM Container Service CLI (ice),\
      \ Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have\
      \ been installed.\n# Based on the organization and space selected in the Job\
      \ credentials are in place for both IBM Container Service and IBM Bluemix\n\
      # The following colors have been defined to help with presentation of logs:\
      \ green, red, label_color, no_color.\nif [ $RESULT -ne 0 ]; then\n    echo -e\
      \ \"${red}Executed failed or had warnings ${no_color}\"\n    ${EXT_DIR}/print_help.sh\n\
      \    exit $RESULT\nfi\necho -e \"${green}Execution complete${no_label}\""
    OPTIONAL_ARGS: -m ${MEMORY}
    PORT: '8080'
    CONTAINER_NAME: us-micro-inventory-cloudnative-integration-fabio
    DEPLOY_TYPE: red_black
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
