---
stages:
- name: Build
  inputs:
  - url: https://github.com/fabiogomezdiaz/refarch-cloudnative-micro-inventory.git
    type: git
    branch: integration
    dir_name: null
  jobs:
  - name: Build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: cloudnative-integration
    COMMAND: |+
      #!/bin/bash
      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.  
      log_and_echo "$LABEL" "Starting build script"

      export JAVA_HOME=~/java8

      cd catalog; ./gradlew build docker
      cd ..
      pwd

      cp -r catalog/docker/* .

      find .

      # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix 
      #####################
      # Run unit tests    #
      #####################
      log_and_echo "$LABEL" "No unit tests cases have been checked in"

      SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/")
      IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
      REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}

      ######################################
      # Build Container via Dockerfile     #
      ######################################

      # REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      # FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

      if [ -f Dockerfile ]; then 
          log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
          ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
          # build image
          BUILD_COMMAND=""
          if [ "${USE_CACHED_LAYERS}" == "true" ]; then 
              BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          else 
              BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          fi 

          if [ $RESULT -ne 0 ]; then
              log_and_echo "$ERROR" "Error building image"
              ice_retry info 
              ice_retry images
              ${EXT_DIR}/print_help.sh
              ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
              exit 1
          else
              log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
              ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
          fi  
      else 
          log_and_echo "$ERROR" "Dockerfile not found in project"
          ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
          exit 1
      fi  

      ######################################################################################
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
      ######################################################################################
      echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
    IMAGE_NAME: us-micro-catalog-cloudnative-integration
    USE_CACHED_LAYERS: 'true'
- name: Deploy
  inputs:
  - type: job
    stage: Build
    job: Build
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: DESIRED_INSTANCES
    value: "2"
    type: text
  - name: EUREKA_REGISTRY_URL
    value: "https://us-netflix-eureka-cloudnative-integration.mybluemix.net/eureka/"
    type: text
  - name: MAX_INSTANCES
    value: "3"
    type: text
  - name: MEMORY
    value: "256"
    type: text
  - name: MIN_INSTANCES
    value: "1"
    type: text
  - name: IGNORE_MAPPING_ROUTE
    value: 'true'
    type: text
  - name: GROUP_WAIT_UNMAP_TIME
    value: '0'
    type: text
  jobs:
  - name: Deploy
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ibm:yp:us-south
      organization: cent@us.ibm.com
      space: cloudnative-integration
    COMMAND: |+
      #!/bin/sh

      set +e
      # download jq
      JQ_BIN=`which jq`
      if [ -z "${JQ_BIN}" ]; then
          if [ ! -f "./jq" ]; then
              wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
              mv jq-linux64 jq
              chmod u+x jq
              JQ_BIN="./jq"
          fi
      fi

      # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
      echo -e "${label_color}Starting deployment script${no_color}"

      # To view/fork this script goto: https://github.com/Osthanes/deployscripts
      # git_retry will retry git calls to prevent pipeline failure on temporary github problems
      # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
      git_retry clone https://github.com/ssibm/deployscripts.git deployscripts

      OPTIONAL_ARGS="${OPTIONAL_ARGS} \
            -e server.port=${PORT} \
            -e eureka.client.fetchRegistry=true \
            -e eureka.client.registerWithEureka=true \
            -e "eureka.client.serviceUrl.defaultZone=${EUREKA_REGISTRY_URL}" \
            -e "elasticsearch.user=${ELASTICSEARCH_USER}" \
            -e "elasticsearch.password=${ELASTICSEARCH_PASSWORD}" \
            -e "elasticsearch.url=${ELASTICSEARCH_URL}""

      log_and_echo "Optional Args: ${OPTIONAL_ARGS}"

      # Deploy Container Group:
      # Optional environment properties (can be set directly in this script, or defined as environment properties):
      #      NAME              Value         Description
      #   =============      =========     ==============
      #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
      #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
      #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

      #                                    Default is false.
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
      #                                                            large (4096), x-large (8192), 2x-large (16384).
      #                                    Default is micro (256).
      #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
      #                                    Default is 1
      # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
      /bin/bash deployscripts/deploygroup.sh

      RESULT=$?

      # source the deploy property file
      if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
        source "$DEPLOY_PROPERTY_FILE"
      fi

      #########################
      # Environment DETAILS   #
      #########################
      # The environment has been setup.
      # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"
    OPTIONAL_ARGS: -m ${MEMORY}
    PORT: '8081'
    CONTAINER_NAME: us-micro-catalog-cloudnative-integration
    DEPLOY_TYPE: red_black
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
